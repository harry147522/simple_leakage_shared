!> Module for eos
module mod_eos_tabulated
  use mod_eos_tabulated_parameters

  implicit none
  public

contains

  !> Read this module's parameters from a file
  subroutine eos_tabulated_read_params(files)
    use mod_eos
    use mod_global_parameters
    character(len=*), intent(in) :: files(:)
    integer                      :: n

    namelist /eos_tabulated_list/ eos_table_name, eos_precision

    do n = 1, size(files)
       ! Try to read in the namelists. They can be absent or in a different
       ! order, since we rewind before each read.
       rewind(unitpar)
       open(unitpar, file=trim(files(n)), status="old")
       read(unitpar, eos_tabulated_list, end=111)
111    close(unitpar)
    end do

  end subroutine eos_tabulated_read_params

  subroutine eos_tabulated_activate()
    use mod_global_parameters
    use mod_eos
    use mod_eos_readtable

    call eos_tabulated_read_params(par_files)
    eos_type = tabulated

    call readtable(eos_table_name)

    eos_get_pressure_one_grid         => tabulated_get_pressure_one_grid
    eos_get_eps_one_grid              => tabulated_get_eps_one_grid
    eos_get_cs2_one_grid              => tabulated_get_cs2_one_grid

    eos_get_temp_one_grid             => tabulated_get_temp_one_grid
    eos_get_all_one_grid              => tabulated_get_all_one_grid

    eos_get_eps_range                 => tabulated_get_eps_range
  end subroutine eos_tabulated_activate

  subroutine tabulated_get_pressure_one_grid(prs,rho,eps,temp,ye)

    use mod_eos
    use mod_eos_interpolation
    implicit none
    
    double precision, intent(inout) :: prs
    double precision, intent(in) :: rho
    double precision, intent(in) :: eps
    double precision, intent(in), optional :: temp, ye

    double precision             :: log_rho, log_temp, log_eps, leps

    leps = eps
! restrict lower bound eps of the eostable
    if (leps < eos_epsmin .or. leps < small_eps) then
      leps = max(small_eps, eos_epsmin)
    endif


    if (rho<small_rho_thr) then
       call atmo_get_pressure_one_grid(prs,rho,eps)
       return
    end if
    if (rho>eos_rhomax) stop "nuc_eos: rho > rhomax"
    if (rho<eos_rhomin) stop "nuc_eos: rho < rhomin"

    if (present(temp)) then
      if (temp>eos_tempmax) stop "nuc_eos: temp > tempmax"
      if (temp<eos_tempmin) stop "nuc_eos: temp < tempmin"
    endif
    if (present(ye)) then
      if (ye>eos_yemax) stop "nuc_eos: ye > yemax"
      if (ye<eos_yemin) stop "nuc_eos: ye < yemin"
    endif
    if (leps>eos_epsmax) stop "nuc_eos: eps > epsmax"
    if (leps<eos_epsmin) stop "nuc_eos: eps < epsmin"

    log_rho = log10(rho)

    if (present(temp)) then
       log_temp = log10(temp)
    else
       log_eps = log10(leps)
       call tabulated_logeps_to_logtemp(log_rho,log_eps,log_temp,ye)
    end if

    call intep3d(log_rho, log_temp, ye, &
                prs, eos_tables(:,:,:,i_logpress), &
           nrho, ntemp, nye, logrho_table, logtemp_table, ye_table)

    prs = 10.0d0**prs

  end subroutine tabulated_get_pressure_one_grid

  subroutine tabulated_get_eps_one_grid(prs,rho,eps,temp,ye)

    use mod_eos
    use mod_eos_interpolation

    implicit none
    
    double precision, intent(in) :: prs
    double precision, intent(in) :: rho
    double precision, intent(in), optional :: temp, ye
    double precision, intent(inout) :: eps

    double precision             :: log_rho, log_temp

    if (rho<small_rho_thr) then
       call atmo_get_eps_one_grid(prs,rho,eps)
       return
    end if

    if (rho>eos_rhomax) stop "nuc_eos: rho > rhomax"
    if (rho<eos_rhomin) stop "nuc_eos: rho < rhomin"

    if (present(temp)) then
      if (temp>eos_tempmax) stop "nuc_eos: temp > tempmax"
      if (temp<eos_tempmin) stop "nuc_eos: temp < tempmin"
    endif

    if (present(ye)) then
      if (ye>eos_yemax) stop "nuc_eos: ye > yemax"
      if (ye<eos_yemin) stop "nuc_eos: ye < yemin"
    endif

    log_rho = log10(rho)
    log_temp = log10(temp)

    call intep3d(log_rho, log_temp, ye, &
                eps, eos_tables(:,:,:,i_logenergy), &
           nrho, ntemp, nye, logrho_table, logtemp_table, ye_table)

    eps = 10.0d0**eps

    if (eps < eos_epsmin .or. eps < small_eps) then
       write(*,*) "passed low eps in get_eps_eos" 
       eps = max(small_eps, eos_epsmin)
    endif

  end subroutine tabulated_get_eps_one_grid

  subroutine tabulated_get_cs2_one_grid(cs2,rho,eps,temp,ye)

    use mod_eos
    use mod_eos_interpolation
    implicit none
    
    double precision, intent(inout) :: cs2
    double precision, intent(in) :: rho
    double precision, intent(in) :: eps
    double precision, intent(in), optional :: temp, ye

    double precision             :: log_rho, log_eps, log_temp, leps

    leps = eps
! restrict lower bound eps of the eostable
    if (leps < eos_epsmin .or. leps < small_eps) then
      leps = max(small_eps, eos_epsmin)
    endif
    

    if (rho<small_rho_thr) then
       call atmo_get_cs2_one_grid(cs2,rho,eps)
       return
    end if

    if (rho>eos_rhomax) stop "nuc_eos: rho > rhomax"
    if (rho<eos_rhomin) stop "nuc_eos: rho < rhomin"
    
    if (present(temp)) then
      if (temp>eos_tempmax) stop "nuc_eos: temp > tempmax"
      if (temp<eos_tempmin) stop "nuc_eos: temp < tempmin"
    endif

    if (present(ye)) then
      if (ye>eos_yemax) stop "nuc_eos: ye > yemax"
      if (ye<eos_yemin) stop "nuc_eos: ye < yemin"
    endif

    if (leps>eos_epsmax) stop "nuc_eos: eps > epsmax"
    if (leps<eos_epsmin) stop "nuc_eos: eps < epsmin"


    log_rho = log10(rho)

    if (present(temp)) then
       log_temp = log10(temp)
    else
       log_eps = log10(leps)
       call tabulated_logeps_to_logtemp(log_rho,log_eps,log_temp,ye)
    end if

    call intep3d(log_rho, log_temp, ye, &
                cs2, eos_tables(:,:,:,i_cs2), &
           nrho, ntemp, nye, logrho_table, logtemp_table, ye_table)

  end subroutine tabulated_get_cs2_one_grid

  subroutine tabulated_get_temp_one_grid(rho,eps,temp,ye)

    use mod_eos
    use mod_eos_interpolation

    implicit none
    
    double precision, intent(in) :: rho
    double precision, intent(in) :: eps, ye
    double precision, intent(inout) :: temp

    double precision             :: log_rho, log_temp, log_eps, leps
    integer                      :: irho, itemp, iye
    ! for root finding
    integer                      :: it_root
    integer                      :: iter_max = 30
    integer                      :: side=0
    double precision             :: tmp
    double precision             :: fp, fm, f
    double precision             :: zp, zm, z

    leps = eps
! restrict lower bound eps of the eostable
    if (leps < eos_epsmin .or. leps < small_eps) then
      leps = max(small_eps, eos_epsmin)
    endif


    if (rho<small_rho_thr) then
       temp = 0.0d0
       return
    end if

    if (rho>eos_rhomax) stop "nuc_eos: rho > rhomax"
    if (rho<eos_rhomin) stop "nuc_eos: rho < rhomin"
    
      if (temp>eos_tempmax) stop "nuc_eos: temp > tempmax"
      if (temp<eos_tempmin) stop "nuc_eos: temp < tempmin"

      if (ye>eos_yemax) stop "nuc_eos: ye > yemax"
      if (ye<eos_yemin) stop "nuc_eos: ye < yemin"

    if (leps>eos_epsmax) stop "nuc_eos: eps > epsmax"
    if (leps<eos_epsmin) stop "nuc_eos: eps < epsmin"

    log_rho = log10(rho)
    log_eps = log10(leps)
    log_temp = log10(temp)

    call tabulated_logeps_to_logtemp(log_rho,log_eps,log_temp,ye)

    temp = 10.0d0**log_temp

  end subroutine tabulated_get_temp_one_grid


  subroutine tabulated_get_all_one_grid(rho,temp,ye,eps,prs,ent,cs2,dedt,&
                       dpderho,dpdrhoe,xa,xh,xn,xp,abar,zbar,mu_e,mu_n,mu_p,muhat,munu)

    use mod_eos
    use mod_eos_interpolation
!    use mod_eos_tabulated_parameters
    implicit none

    double precision, intent(in) :: rho, ye, eps
    double precision, intent(inout), optional :: ent, prs, temp, cs2, dedt
    double precision, intent(inout), optional :: dpderho,dpdrhoe,xa,xh,xn,xp,abar,zbar
    double precision, intent(inout), optional :: mu_e,mu_n,mu_p,muhat,munu

    double precision             :: log_rho, log_temp, log_eps, leps

    double precision             :: ffx(nvars)

!write(*,*) "entering find all"
    leps = eps
! restrict lower bound eps of the eostable
    if (leps < eos_epsmin .or. leps < small_eps) then
      leps = max(small_eps, eos_epsmin)
    endif

    if (rho<small_rho_thr) then
       if (present(cs2)) then
       call atmo_get_cs2_one_grid(cs2,rho,leps)
       endif
       if (present(prs)) then
       call atmo_get_pressure_one_grid(prs,rho,leps)
       endif
       if (present(temp)) then
       temp = eos_tempmin
       endif
       return
    end if

!write(*,*) "rho, ye, eps"
!write(*,*) rho, ye, leps

    if (rho>eos_rhomax) stop "nuc_eos: rho > rhomax"
    if (rho<eos_rhomin) stop "nuc_eos: rho < rhomin"

!    if (present(ye)) then
      if (ye>eos_yemax) stop "nuc_eos: ye > yemax"
      if (ye<eos_yemin) then
        write(*,*) ye
        stop "nuc_eos: ye < yemin at finding all"
      endif
!    endif

    if (present(temp)) then
      if (temp>eos_tempmax) stop "nuc_eos: temp > tempmax"
      if (temp<eos_tempmin) stop "nuc_eos: temp < tempmin"
    endif

    if (leps>eos_epsmax) stop "nuc_eos: eps > epsmax"
    if (leps<eos_epsmin) stop "nuc_eos: eps < epsmin"

    log_rho = log10(rho)
    log_eps = log10(leps)

    call tabulated_logeps_to_logtemp(log_rho,log_eps,log_temp,ye)

    call intep3d_many(log_rho, log_temp, ye, &
                      ffx, eos_tables,  &
                      nrho, ntemp, nye, nvars,     &
                      logrho_table, logtemp_table, ye_table)!, irho, itemp, iye)

   if (present(temp)) temp = 10**log_temp
   if (present(prs)) prs = 10**ffx(1)
   if (present(ent)) ent  = ffx(3)
   if (present(munu))  munu = ffx(4)
   if (present(cs2))  cs2  = ffx(5)
!  derivatives
   if (present(dedt)) dedt = ffx(6)
   if (present(dpdrhoe))  dpdrhoe = ffx(7)
   if (present(dpderho))  dpderho = ffx(8)
!  chemical potentials
   if (present(muhat))  muhat = ffx(9)
   if (present(mu_e))  mu_e = ffx(10)
   if (present(mu_p))  mu_p = ffx(11)
   if (present(mu_n))  mu_n = ffx(12)
!  compositions
   if (present(xa)) xa = ffx(13)
   if (present(xh)) xh = ffx(14)
   if (present(xn)) xn = ffx(15)
   if (present(xp)) xp = ffx(16)
   if (present(abar)) abar = ffx(17)
   if (present(zbar)) zbar = ffx(18)


  end subroutine tabulated_get_all_one_grid


  subroutine tabulated_logeps_to_logtemp(log_rho,log_eps,log_temp,ye)

    use mod_eos
    use mod_eos_interpolation
!    use mod_rootfinding
!    use mod_eos_tabulated_parameters

    implicit none
    
    double precision, intent(in) :: log_rho, log_eps, ye
    double precision, intent(inout) :: log_temp

    integer                      :: irho, itemp, iye
    double precision             :: tmp
    double precision             :: logtemp_min, logtemp_max
    ! for root finding
    integer                      :: iter_max = 300
    logical :: root_is_found
    integer                      :: it_root
    integer                      :: side=0
    double precision             :: fp, fm, f
    double precision             :: zp, zm, z


    call intep3d(log_rho, log_temp, ye, & 
                tmp, eos_tables(:,:,:,i_logenergy), &
           nrho, ntemp, nye, logrho_table, logtemp_table, ye_table, irho, itemp, iye)

    if (abs(tmp-log_eps) < eos_precision*abs(log_eps) ) return

    fm = eos_tables(irho,1,iye,i_logenergy) - log_eps
    fp = eos_tables(irho,ntemp,iye,i_logenergy) - log_eps
    zm = logtemp_table(1)
    zp = logtemp_table(ntemp)
!    logtemp_min = logtemp_table(1)
!    logtemp_max = logtemp_table(ntemp)

    ! get eps from temperature
!    find_root_for_func => func_eps_of_temp
!    call rootfinding_illinois(log_temp, logtemp_min, logtemp_max, eos_precision, iter_max, root_is_found)

!stop
!    call rootfinding_falsi(log_temp, logtemp_min, logtemp_max, eos_precision, iter_max, root_is_found)
 !   if ( .not. root_is_found) then
 !      call mpistop("Fail to find the root in tabulated eos")
 !   endif 

    do it_root = 1, iter_max
       z = (fm * zp - fp * zm) / (fm - fp)
       
       if (abs(zp-zm)  <  (eos_precision * abs(zp+zm)) ) exit
  
       call intep3d(log_rho, z, ye, & 
                f, eos_tables(:,:,:,i_logenergy), &
                 nrho, ntemp, nye, logrho_table, logtemp_table, ye_table)
       f = f - log_eps
       !if (abs(f) < eos_precision*abs(log_eps) ) exit
  
       if ( (f * fp) > 0.0d0 ) then
          !f and fp have same sign, copy z to zp
          zp = z
          fp = f
          if (side == 1) fm = fm / 2.0d0
          side = 1
       else if ( (f * fm) > 0.0d0 ) then
          !f and fm have same sign, copy z to zm
          zm = z
          fm = f
          if (side == 2) fp = fp / 2.0d0
          side = 2
       else !it looks like zero
          exit
       end if
    end do
  
    if (it_root >= iter_max-1) stop "fail to find the root in tabulated eos"

    log_temp = z

!  yt = logtemp_table
!    contains
!       double precision function func_eps_of_temp(log_temp_in)
!         double precision, intent(in) :: log_temp_in
!         call intep3d(log_rho, log_temp_in, ye, & 
!                  func_eps_of_temp, eos_tables(:,:,:,i_logenergy), &
!                   nrho, ntemp, nye, logrho_table, logtemp_table, ye_table)
!         func_eps_of_temp = func_eps_of_temp - log_eps
!       end function
  end subroutine tabulated_logeps_to_logtemp

!  subroutine tabulated_logeps_to_logent(log_rho,log_temp0,ye,sin)
!  
!  ! This routine finds the new temperature based
!  ! on rho, Y_e, entropy, sin = input of entropy
!      use mod_eos
!      use mod_eos_interpolation
!  
!    implicit none
!  
!    double precision, intent(in) :: log_rho, sin, ye
!    double precision, intent(inout) :: log_temp0
!  
!    double precision s,log_temp,ldt
!    double precision tol
!    double precision d1,d2,d3
!    double precision s0,s1,lt1
!  
!    double precision ltn,ltmax,ltmin
!    double precision tinput
!  
!    integer :: irho, itemp, iye
!    integer :: rl = 0
!    integer itmax,i
!    integer ii,jj,kk
!  
!  !  keyerrt=0
!  
!    tol=10.0d-10 !rfeps ! need to find energy to less than 1 in 10^-10
!    itmax=20 ! use at most 20 iterations, then bomb
!  
!    log_temp=log_temp0
!    lt1=log_temp
!  
!    s0=sin
!    s1=s0
!  
!    ltmax=logtemp_table(ntemp)
!    ltmin=logtemp_table(1)
!  
!  
!    !preconditioning 1: do we already have the right temperature?
!      call intep3d(log_rho, log_temp, ye, & 
!                  s, eos_tables(:,:,:,i_entropy), &
!             nrho, ntemp, nye, logrho_table, logtemp_table, ye_table, irho, itemp, iye)
!  
!  
!  !  call findthis(lr,lt,y,s,alltables(:,:,:,3),d1,d2,d3)
!  !
!    if (abs(s-s0).lt.tol*abs(s0)) then
!       return
!    endif
!    lt1=log_temp
!    s1=s
!  
!  
!    do i=1,itmax
!       !d2 is the derivative ds/dlogtemp;
!       ldt = -(s - s0)/d2
!       ltn = log_temp+ldt
!       ltn = min(ltn,ltmax)
!       ltn = max(ltn,ltmin)
!       lt1=log_temp
!       log_temp=ltn
!       s1=s
!  
!  
!      call intep3d(log_rho, log_temp, ye, & 
!                  s, eos_tables(:,:,:,i_entropy), &
!             nrho, ntemp, nye, logrho_table, logtemp_table, ye_table, irho, itemp, iye)
!  
!  !     call findthis(lr,lt,y,s,alltables(:,:,:,3),d1,d2,d3)
!       if (abs(s - s0).lt.tol*abs(s0)) then
!         exit
!       endif
!       !setup new d2
!  
!       ! if we are closer than 10^-2  to the
!       ! root (eps-eps0)=0, we are switching to
!       ! the secant method, since the table is rather coarse and the
!       ! derivatives may be garbage.
!       if(abs(s-s0).lt.1.0d-3*abs(s0)) then
!          d2 = (s-s1)/(log_temp-lt1)
!       endif
!    enddo
!  
!  
!   if(i.ge.itmax) then
!  !    keyerrt=667
!  
!            write(*,*) "EOS: Did not converge in findtemp_entropy!"
!          stop
!  !   call bisection(lr,lt0,y,s0,lt,alltables(:,:,:,3),keyerrt,2)
!  !    if(keyerrt.eq.667) then
!  !          write(*,*) "EOS: Did not converge in findtemp_entropy!"
!  !          write(*,*) "rl,logrho,logtemp0,ye,lt,s,s0,abs(s-s0)/s0"
!  !          write(*,"(i4,i4,1P10E19.10)") i,rl,lr,lt0,y,lt,s,s0,abs(s-s0)/s0
!  !          write(*,*) "Tried calling bisection... didn't help... :-/"
!  !          write(*,*) "Bisection error: ",keyerrt
!  !    endif
!  
!      log_temp0=log_temp
!      return
!   endif
!  
!  
!    log_temp0=log_temp
!  
!  
!  subroutine tabulated_logeps_to_logent

  subroutine tabulated_get_eps_range(rho, eps_min, eps_max, ye)
    use mod_eos
    use mod_eos_interpolation
!    use mod_eos_tabulated_parameters

    implicit none

    double precision, intent(in) :: rho
    double precision, intent(in), optional :: ye
    double precision, intent(out) :: eps_max, eps_min
    double precision             :: log_rho, log_temp, eps, lye

!! in normal case
!    eps_max = eos_epsmax
!    eps_min = eos_epsmin

  ! find eps_min    
    log_rho = log10(eos_rhomin)
    log_temp = log10(eos_tempmin)
    lye = eos_yemin

    call intep3d(log_rho, log_temp, lye, &
                eps, eos_tables(:,:,:,i_logenergy), &
           nrho, ntemp, nye, logrho_table, logtemp_table, ye_table)
   
   eps_min = max(eos_epsmin, eps)

!  write(*,*) eos_epsmin, eps, "eos_epsmin, eps"
!    eps_min = max(eos_epsmin, eps) 

    eps = 0.0d0
  ! find eps_max
    log_rho = log10(eos_rhomax)
    log_temp = log10(eos_tempmax)
    lye = eos_yemax

    call intep3d(log_rho, log_temp, lye, &
                eps, eos_tables(:,:,:,i_logenergy), &
           nrho, ntemp, nye, logrho_table, logtemp_table, ye_table)

!  write(*,*) eos_epsmax, eps, "eos_epsmax, eps"
    eps_max = min(eos_epsmax, eps)
!write(*,*) eps_max, eps_min, "max min "    
!stop "at first time of eps_range"


  end subroutine tabulated_get_eps_range  

  subroutine set_eos_epsmin_max

    use mod_eos
    use mod_eos_interpolation

    implicit none

    double precision             :: log_rho, log_temp, eps, ye

    eps = 0
    log_rho = log10(eos_rhomin)
    log_temp = log10(eos_tempmin)
    ye = eos_yemin

    call intep3d(log_rho, log_temp, ye, &
                eps, eos_tables(:,:,:,i_logenergy), &
           nrho, ntemp, nye, logrho_table, logtemp_table, ye_table)

!    eos_epsmin = 10.0d0**eps    calucuated wrongly..... duuno why
!    eos_epsmin = 10.0d0**eps

    eps = 0
    log_rho = log10(eos_rhomax)
    log_temp = log10(eos_tempmax)
    ye = eos_yemax

    call intep3d(log_rho, log_temp, ye, &
                eps, eos_tables(:,:,:,i_logenergy), &
           nrho, ntemp, nye, logrho_table, logtemp_table, ye_table)

    eos_epsmax = 10.0d0**eps

  write(*,*) "################################################"
  write(6,*) "Done reading eos tables ,  all in code unit"
  write(*,*)  eos_yemin, eos_yemax, "eos_yemin  and max"
  write(*,*)  eos_tempmin, eos_tempmax, "eos_tempmin  and max"
  write(*,*)  eos_rhomin, eos_rhomax, "eos_rhomin  and max"
  write(*,*)  eos_epsmin, eos_epsmax, "eos_epsmin  and max"
  write(*,*) "################################################"
!    stop "set_eos_epsmin max"
  end subroutine set_eos_epsmin_max

end module mod_eos_tabulated
